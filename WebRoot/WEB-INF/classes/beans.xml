<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- 分散配置 -->
	<context:property-placeholder location="classpath:dataSource.properties"/>
	
	<!-- 自动扫描配置 -->
	<context:component-scan base-package="com.meng.surveypark.dao.impl,
											com.meng.surveypark.service.impl,
											com.meng.surveypark.struts2.action,
											com.meng.surveypark.listener"></context:component-scan>

	<!-- 配置数据源 （主库）-->
	<bean id="dataSource-main" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		
		<property name="minPoolSize" value="${c3p0.pool.size.max}"></property>
		<property name="maxPoolSize" value="${c3p0.pool.size.min}"></property>
		<property name="initialPoolSize" value="${c3p0.pool.size.init}"></property>
		<property name="acquireIncrement" value="${c3p0.pool.size.increment}"></property>
	</bean>

	<!-- 配置数据源 （从库）-->
	<bean id="dataSource-1" parent="dataSource-main">
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/surveypark_1"></property>
	</bean>
	
	<!-- 数据源路由器（用于分布式数据库） -->
	<bean id="dataSourceRouter" class="com.meng.surveypark.datasource.SurveyparkDataSourceRouter">
		<property name="targetDataSources">
			<map>
				<entry key="odd" value-ref="dataSource-main"></entry>
				<entry key="even" value-ref="dataSource-1"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource-main"></property>
	</bean>
	
	<!-- spring 会话工厂 bean （ spring 整合 hibernate 的核心入口） -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 
		<property name="dataSource" ref="dataSource"></property>
		-->
		<!-- 配置数据源路由器 -->
		<property name="dataSource" ref="dataSourceRouter"></property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:com/meng/surveypark/model</value>
			</list>
		</property>
	</bean>
	
	<!-- 缓存管理工厂bean -->
	<bean id="cacheManagerFactoryBean" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"></property>
	</bean>
	
	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactoryBean"></property>
	</bean>
	
	<!-- 自定义缓存key生成器 -->
	<bean id="keyGenerator" class="com.meng.surveypark.cache.SurveyparkKeyGenerator"></bean>
	
	<!-- 缓存通知 -->
	<cache:advice id="cacheAdvice" cache-manager="cacheManager" key-generator="keyGenerator">
		<cache:caching cache="surveypark">
			<!-- 缓存以下方法 （读操作）-->
			<cache:cacheable method="get*"/>
			<cache:cacheable method="find*"/>
			<cache:cacheable method="load*"/>
			
			<!-- 当执行以下方法（写操作）时，清除所有缓存 -->
			<cache:cache-evict method="save*" all-entries="true"/>
			<cache:cache-evict method="update*" all-entries="true"/>
			<cache:cache-evict method="delete*" all-entries="true"/>
			<cache:cache-evict method="clear*" all-entries="true"/>
			<cache:cache-evict method="toggle*" all-entries="true"/>
			<cache:cache-evict method="move*" all-entries="true"/>
			<cache:cache-evict method="batch*" all-entries="true"/>
			<cache:cache-evict method="execute*" all-entries="true"/>
		</cache:caching>
	</cache:advice>
	
	<!-- 日志记录仪 -->
	<bean id="logger" class="com.meng.surveypark.advice.Logger"></bean>
	
	<!-- Hibernate 事务管理器，用来做 Service 层面的事务管理，而且达到平台无关性 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory"	ref="sessionFactory"></property>
	</bean>
	
	<!-- 事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes >
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
			<tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"/>
			
			<tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
			<tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true"/>
			
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"/>			
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP配置
    <aop:pointcut>：用来定义切入点，该切入点可以重用；
    <aop:advisor>：用来定义只有一个通知和一个切入点的切面；
    <aop:aspect>：用来定义切面，该切面可以包含多个切入点和通知，而且标签内部的通知和切入点定义是无序的；和advisor的区别就在此，advisor只包含一个通知和一个切入点。
	 -->
	<!-- order属性表示优先级，越小优先级越大 -->
	<aop:config>
		<!-- 事务切入点通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* *..*Service.*(..))" order="2" />
		<!-- 缓存切入点通知-->
		<aop:advisor advice-ref="cacheAdvice" pointcut="execution(* *..*Service.*(..))" order="0"/>
		<!-- 日志记录仪切面 -->
		<aop:aspect id="loggerAspect" ref="logger" order="1" >
			<aop:around method="record" pointcut="(execution(* *..*Service.save*(..))
												or execution(* *..*Service.update*(..))
												or execution(* *..*Service.new*(..))
												or execution(* *..*Service.batch*(..))
												or execution(* *..*Service.delete*(..))
												or execution(* *..*Service.move*(..))
												or execution(* *..*Service.clear*(..))
												or execution(* *..*Service.toggle*(..)))
												and !bean(logService)" />
		</aop:aspect>
	</aop:config>
</beans>